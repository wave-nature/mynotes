{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","useEffect","className","classes","form","onSubmit","event","preventDefault","commentData","current","value","text","quoteId","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","getAllComments","data","useState","isAddingComment","setIsAddingComment","useParams","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","params","match","useRouteMatch","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yIC8CXC,EAxCQ,SAACC,GACtB,MAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACvBC,EAAiBC,mBAEfC,EAAmBR,EAAnBQ,eAERC,qBAAU,WACO,cAAXL,GAA2BC,GAC7BG,MAED,CAACJ,EAAQC,EAAOG,IAYnB,OACE,uBAAME,UAAWC,IAAQC,KAAMC,SAXP,SAACC,GACzBA,EAAMC,iBAGN,IAAMC,EAAcV,EAAeW,QAAQC,MAG3Cf,EAAY,CAAEa,YAAa,CAAEG,KAAMH,GAAeI,QAASpB,EAAMoB,WAIjE,UACc,YAAXhB,GACC,qBAAKM,UAAU,WAAf,SACE,cAACW,EAAA,EAAD,MAGJ,sBAAKX,UAAWC,IAAQW,QAAxB,UACE,uBAAOC,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKpB,OAEvC,qBAAKI,UAAWC,IAAQgB,QAAxB,SACE,wBAAQjB,UAAU,MAAlB,+B,iBC/BOkB,EARK,SAAC5B,GACnB,OACE,oBAAIU,UAAWC,IAAQkB,KAAvB,SACE,4BAAI7B,EAAMmB,U,iBCQDW,EAVM,SAAC9B,GACpB,OACE,oBAAIU,UAAWC,IAAQoB,SAAvB,SACG/B,EAAM+B,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8Bd,KAAMc,EAAQd,MAA1Bc,EAAQT,UCyDnBU,EAtDE,WACf,MAAsCjC,YAAQkC,KAAtChC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQgC,EAA7B,EAA6BA,KAC7B,EAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEQnB,EADOoB,cACPpB,QAMRX,qBAAU,WACRN,EAAYiB,KACX,CAACA,EAASjB,IAEb,IAII4B,EAJEU,EAAsBC,uBAAY,WACtCvC,EAAYiB,KACX,CAACjB,EAAaiB,IAmBjB,MAfe,YAAXhB,IACF2B,EACE,qBAAKrB,UAAU,WAAf,SACE,cAACW,EAAA,EAAD,OAKS,cAAXjB,GAA0BgC,GAAQA,EAAKO,OAAS,IAClDZ,EAAW,cAAC,EAAD,CAAaA,SAAUK,KAErB,cAAXhC,GAA4BgC,GAAwB,IAAhBA,EAAKO,SAC3CZ,EAAW,mBAAGrB,UAAU,WAAb,wCAIX,0BAASA,UAAWC,IAAQoB,SAA5B,UACE,gDACEO,GACA,wBAAQ5B,UAAU,MAAMkC,QAjCC,WAC7BL,GAAmB,IAgCf,2BAIDD,GACC,cAAC,EAAD,CACE9B,eAAgBiC,EAChBrB,QAASA,IAGZW,M,iBChDQc,EATU,SAAC7C,GACxB,OACE,yBAAQU,UAAWC,IAAQmC,MAA3B,UACE,4BAAI9C,EAAMmB,OACV,qCAAanB,EAAM+C,aC4CVC,UA1CK,WAClB,MAA6C/C,YAAQgD,KAAgB,GAA7D9C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQgC,EAA7B,EAA6BA,KAAM/B,EAAnC,EAAmCA,MAC7B6C,EAASV,cACTW,EAAQC,cACNhC,EAAY8B,EAAZ9B,QAMR,OAJAX,qBAAU,WACRN,EAAYiB,KACX,CAACjB,EAAaiB,IAEF,YAAXhB,EAEA,qBAAKM,UAAU,WAAf,SACE,cAACW,EAAA,EAAD,MAKFhB,EACK,mBAAGK,UAAU,iBAAb,SAA+BL,IAGnC+B,EAAKjB,KAIR,gCACE,cAAC,EAAD,CAAkBA,KAAMiB,EAAKjB,KAAM4B,OAAQX,EAAKW,SAChD,cAAC,IAAD,CAAOM,KAAI,UAAKF,EAAME,MAAQC,OAAK,EAAnC,SACE,qBAAK5C,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAY6C,GAAE,UAAKJ,EAAMK,IAAX,aAA9B,+BAKJ,cAAC,IAAD,CAAOH,KAAI,UAAKF,EAAME,KAAX,aAAX,SACE,cAAC,EAAD,SAbG","file":"static/js/4.6592e2bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1aQ8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Ps5K8\",\"loading\":\"NewCommentForm_loading__2c5Bw\",\"control\":\"NewCommentForm_control__1KTeX\",\"actions\":\"NewCommentForm_actions__2fQ2A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2MQ3R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3KxNk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3B1wW\"};","import { useRef, useEffect } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/hooks/use-http\";\nimport { addComment } from \"../../lib/lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const commentData = commentTextRef.current.value;\n\n    // send comment to server\n    sendRequest({ commentData: { text: commentData }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/hooks/use-http\";\nimport { getAllComments } from \"../../lib/lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommetnList from \"./CommentsList\";\n\nconst Comments = () => {\n  const { sendRequest, status, data } = useHttp(getAllComments);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && data && data.length > 0) {\n    comments = <CommetnList comments={data} />;\n  }\n  if (status === \"completed\" && (!data || data.length === 0)) {\n    comments = <p className=\"centered\">No comments on this quote</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={addedCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const { sendRequest, status, data, error } = useHttp(getSingleQuote, true);\r\n  const params = useParams();\r\n  const match = useRouteMatch(); //contains info about current page url {path:'/quotes/:quoteId'}\r\n  const { quoteId } = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focus\">{error}</p>;\r\n  }\r\n\r\n  if (!data.text) {\r\n    return <p>No quote found</p>;\r\n  }\r\n  return (\r\n    <div>\r\n      <HighlightedQuote text={data.text} author={data.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Show Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}